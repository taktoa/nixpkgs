/* Takes an info file generated by mvn2nix
 * (https://github.com/NixOS/mvn2nix-maven-plugin)
 * and builds the maven project with it.
 */

{ stdenv, maven, jdk, runCommand, lib
, fetchurl, writeText, requireFile
}:

with builtins;

with lib.trivial;

args@{
     # Required arguments
       infoFile              # Path to the project-info.json
     , src                   # Source path to pass to stdenv.mkDerivation
     , postPackagePhase      # Runs after mvn package

     # Maven commands for the relevant phases
     , compileCmd    ? "compile"
     , docCmd        ? "javadoc:aggregate"
     , testCmd       ? "verify"
     , packageCmd    ? "package"

     # Commmand line options
     , mavenFlags    ? ""    # Additional flags to pass to Maven
     , compileFlags  ? ""    # Additional flags when running compileCmd
     , docFlags      ? ""    # Additional flags when running docCmd
     , testFlags     ? ""    # Additional flags when running testCmd
     , packageFlags  ? ""    # Additional flags when running packageCmd

     # Boolean flags
     , genDoc        ? false # Should we generate javadocs?
     , runTests      ? true  # Should we run tests?

     # Overrides
     , overrideJDK   ? jdk   # Override the Maven JDK with the given path
     , extraSettings ? ""    # Additional settings to add to settings.xml
     , attrFunc      ? id    # This gets run on the mkDerivation attribute set
     , ...                   # Additional args are added to the
     }:                      # invocation of stdenv.mkDerivation

let info      = fromJSON (readFile infoFile);
               
    retrieve  = set: if authp set then requireFile else fetchurl;
    hasURL    = set: (hasAttr "url"  set) &&
                     (hasAttr "sha1" set);
    fetch     = set: (retrieve set) { inherit (set) url sha1; };
               
    authp     = set: (hasAttr "authenticated" set) &&
                     (getAttr "authenticated" set);
    aid       = set: set.artifactId;
    gid       = set: set.groupId;
    rid       = set: set.repository-id;
    vers      = set: set.unresolved-version or set.version;
               
    tr        = chara: charb: string: lib.replaceChars [chara] [charb] string;
    sed       = pat: rep: string:
      readFile (runCommand ''sed-${hashString "md5" string}'' {} ''
          echo '${string}' | sed 's|${pat}|${rep}|g' - > $out
      '');

    getDir    = dep: ''${tr "." "/" (gid dep)}/${(aid dep)}/${vers dep}'';

    scriptGen = dep:
      let fetchDep  = fetch dep;
          fetchMeta = fetch dep.metadata;
          pathName = sed dep.version dep.unresolved-version fetchDep.name;
          linkScript = ''
            ln -svf ${fetchMeta} $dir/maven-metadata-${dep.repository-id}.xml
            ln -sv  ${fetchDep}  $dir/${pathName}
          '';
      in ''
          dir=$out/${getDir dep}
          mkdir -p $dir
          ln -sv ${fetchDep} $dir/${fetchDep.name}
          ${lib.optionalString (dep ? metadata) linkScript}
      '';

    script = writeText "build-maven-repository.sh" ''
        ${lib.concatStrings (map scriptGen (filter hasURL info.dependencies))}
    '';

    repo = runCommand "maven-repository" {} ''
        bash ${script}
    '';

    settingsFile = writeText "settings.xml" ''
        <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                              http://maven.apache.org/xsd/settings-1.0.0.xsd">
          <localRepository>${repo}</localRepository>
          ${extraSettings}
        </settings>
    '';

    runMaven = command: flags: ''
        mvn ${mavenFlags} \
            -T $NIX_BUILD_CORES \
            --offline \
            --settings ${settingsFile} \
            ${command} ${flags}
    '';

    compilePhase = runMaven compileFlags compileCmd;

    packagePhase = runMaven packageFlags packageCmd;

    docPhase  = if genDoc   then runMaven docFlags docCmd else "";

    testPhase = if runTests then runMaven testFlags testCmd else "";

    defaultPostPackage = "mv target/*.jar $out";
    
    persistentAttrs = oldAttrs: oldAttrs // {
      buildInputs = [
        jdk
        (maven.override { jdk = overrideJDK; })
      ] ++ oldAttrs.buildInputs;
    };
in
stdenv.mkDerivation (attrFunc (persistentAttrs ({
  inherit compilePhase docPhase testPhase packagePhase;

  name = "${info.project.artifactId}-${info.project.version}.jar";

  buildPhase = ''
      ${compilePhase}

      ${docPhase}
  '';

  checkPhase = ''
      ${testPhase}
  '';

  installPhase = ''
      ${packagePhase}
      
      ${if postPackagePhase == "" then defaultPostPackage else postPackagePhase}
  '';
} // args)))
